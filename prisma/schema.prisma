generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Posts {
  id          String       @id @default(uuid())
  title       String       @db.VarChar(100)
  description String       @db.VarChar(2000)
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  image_url   String
  userEmail   String
  comments    Comments[]
  likes       likes[]
  views       post_views[]

  @@map("posts")
}

model User {
  id                   String       @id @default(cuid())
  name                 String       @db.VarChar(50)
  email                String       @unique
  image                String?
  bio                  String?      @default("Tell about yourself") @db.VarChar(150)
  username             String       @unique @default(cuid())
  created_at           DateTime     @default(now())
  updated_at           DateTime     @updatedAt
  premiumAccountHolder Boolean      @default(false)
  comments             Comments[]
  followers            Followers[]
  likes                likes[]
  views                post_views[]

  @@map("user")
}

model Followers {
  id          String   @id @default(cuid())
  userEmail   String
  createdAt   DateTime @default(now())
  authorEmail String
  author      User     @relation(fields: [authorEmail], references: [email])

  @@unique([userEmail, authorEmail])
  @@map("followers")
}

model likes {
  userEmail String
  postId    String
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  posts     Posts    @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userEmail], references: [email])

  @@unique([userEmail, postId])
}

model Comments {
  id         String   @id @default(uuid())
  postId     String
  userEmail  String
  text       String   @db.VarChar(1000)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  posts      Posts    @relation(fields: [postId], references: [id])
  user       User     @relation(fields: [userEmail], references: [email])

  @@unique([userEmail, postId])
  @@map("comments")
}

model post_views {
  id        String   @id @default(uuid())
  postId    String
  userEmail String
  viewed_at DateTime @default(now())
  post      Posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userEmail], references: [email])

  @@unique([userEmail, postId])
}
